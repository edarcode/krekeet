---
import type { HTMLAttributes } from "astro/types";
import Btn from "../../../buttons/Btn/Btn.astro";
import { COUNTRY_CODE } from "./countryCode";
import { SERVICES } from "./services";

interface Props extends HTMLAttributes<"form"> {
  cls?: string;
}

const { cls } = Astro.props;
---

<form class:list={[cls]} id="contactForm">
  <label>
    <div>Nombre:</div>
    <input type="text" name="name" />
  </label>

  <label>
    <div>Email:</div>
    <input type="email" name="email" required />
  </label>

  <label for="num" class="wrapper_num">
    <div>NÃºmero:</div>
    <div>
      <select name="countryCode">
        {
          COUNTRY_CODE.map((code) => (
            <option value={code.value}>{code.display}</option>
          ))
        }
      </select>
      <input id="num" type="number" name="num" />
    </div>
  </label>

  <label class="wrapper_serv">
    <div>Industria:</div>
    <select name="serv">
      {
        SERVICES.map((serv) => (
          <option value={serv.value}>{serv.display}</option>
        ))
      }
    </select>
  </label>

  <label class="wrapper_msg">
    <div>Mensaje:</div>
    <textarea name="msg" required></textarea>
  </label>

  <Btn id={"form__btn"}>Enviar</Btn>
</form>

<script>
  import { sendMailService } from "./sendMailService";

  const form = document.querySelector("#contactForm") as HTMLFormElement;
  const btn = document.querySelector("#form__btn") as HTMLButtonElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const target = e.target as HTMLFormElement;
    const formData = new FormData(target);

    const name = formData.get("name");
    const email = formData.get("email");
    const countryCode = formData.get("countryCode");
    const num = formData.get("num");
    const serv = formData.get("serv");
    const msg = formData.get("msg");

    if (!msg || !email) return;

    try {
      btn.disabled = true;

      await sendMailService({
        from: String(email),
        msg: String(msg),
        name: String(name),
        countryCode: String(countryCode),
        num: Number(num),
        serv: String(serv),
      });

      form.reset();
    } catch (error) {
      btn.style.backgroundColor = "var(--red)";
    } finally {
      btn.disabled = false;
    }
  });
</script>

<style>
  input,
  select,
  textarea {
    border: none;
    padding: 5px;
    width: 100%;
    min-height: 51px;
    border-radius: 5px;
  }

  input {
  }

  textarea {
    min-height: 128px;
  }

  form {
    font-size: 20px;
    line-height: 30px;
    padding: var(--xl);
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--xl);
    align-items: center;

    .wrapper_num {
      div {
        display: grid;
        grid-template-columns: auto 1fr;

        select {
          border-radius: 5px 0 0 5px;
        }

        input {
          border-radius: 0 5px 5px 0;
        }
      }
    }

    .wrapper_msg {
      grid-column: span 2;
    }

    button {
      justify-self: end;
      grid-column: span 2;
      min-width: 250px;
    }

    @media (max-width: 768px) {
      grid-template-columns: 1fr;
      max-width: 90%;
      margin-left: auto;
      margin-right: auto;

      .wrapper_msg,
      button {
        grid-column: span 1;
      }
    }
  }
</style>
